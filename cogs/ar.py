from discord.ext import commands
from lib.dbman import c, conn
import math
import config


class Ar(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def ask_roger(self, ctx): # Send query to vamp.db to select lookup from Ar table and output the contents field
        """
        Looks up ask_roger listing in database, then returns it in a message.\n\
        Multi-worded listings must be used in quotation marks.\n\
        \n\
        Example: $ask_roger Influence Points
        """
        entry = ctx.message.content.lower().split(maxsplit=1)[-1]
        c.execute("SELECT Contents FROM Ar WHERE LOWER(Listing) == ?",(entry,))
        response = c.fetchall()
        if len(response) == 0:
            await ctx.send(f"Roger:\nI don't know what you mean by' '{entry}'.")
        else:
            # response[3:-4]
            await ctx.send('Roger:\n"' + str(response[0][0]) + '"')

    @commands.command()
    async def ar_add(self, ctx):
        """
        Checks if an entry exists in Ar table, and if not, adds the record of name,\n\
        and its contents to the table. If the entry does exist, it spits back an error.\n\
        Use := to separate name and content\n
        \n\
        Syntax: $ar_add [entry name]:=[entry information]\n\
        Example: $ar_add Influence Points:=Influence points are generated by...
        """
        authorized = False
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        msg = ctx.message.content.split(':=')
        entry = msg[0].strip()
        entry = entry.split(maxsplit=1)[-1]
        data = msg[-1].strip()
        if authorized:
            c.execute("SELECT Listing FROM Ar WHERE LOWER(Listing) == ?",(entry.lower(),))
            exist_check = c.fetchall()
            if not exist_check:
                c.execute("INSERT INTO Ar VALUES (?,?)",(entry, data,))
                conn.commit()
                await ctx.send(f"Ask Roger - Listing '{entry}' successfully added with value {data}.")
            else:
                await ctx.send(f"Roger Error - Listing '{entry}' already exists.")
        else:
            await ctx.send("Roger: Hey! Stop trying to poke around my brain!")

    @commands.command()
    async def ar_delete(self, ctx):
        """
        Checks if an entry exists in Ar table, and if so, removes the record from the table.\n\
        If the entry does not exist, it spits back an error.\n\
        For multi-word listings, they must be enclosed in quotes.\n\
        \n\
        Example: $ar_delete Influence Points
        """
        authorized = False
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        if authorized:
            lister = ctx.message.content.split(maxsplit=1)[-1]
            lister = lister.lower()
            c.execute("SELECT Listing FROM Ar WHERE LOWER(Listing) == ?",(lister,))
            exist_check = c.fetchall()
            if not exist_check:
                await ctx.send(f"Roger Error - Entry '{lister}' does not exist")
            else:
                c.execute("DELETE FROM Ar WHERE LOWER(Listing) == ?",(lister,))
                conn.commit()
                await ctx.send(f"Ask Roger - Listing '{lister}' has been removed.")
        else:
            await ctx.send("Roger: Hey! Stop poking trying to poke around my brain!")

    @commands.command()
    async def ar_list(self, ctx, n=1):
        """
        Outputs a list of ask_roger entries in the database. Enter the page number to be displayed.
        """
        c.execute("SELECT Listing FROM Ar")
        names = c.fetchall()
        names = [x[0].title() for x in names]
        names.sort()
        names = [ str(idx+1)+'.   '+i+'\n' for idx, i in enumerate(names)]
        total_pages = math.ceil(len(names)/10)
        if n > total_pages:
            await ctx.send("Not enough entries. Enter lower page number.")
        elif n<=0:
            await ctx.send("Page number must be positive")
        else:
            s = "\n"
            for idx,i in enumerate(names):
                if idx//10 == n-1:
                    s += i
            if n<total_pages:
                s+=" \nDisplaying page {n} out of {total_pages}".format(n=n,total_pages=total_pages)
            await ctx.send("Roger - I can talk about: {}".format(s))


def setup(bot):
    bot.add_cog(Ar(bot))
