from discord.ext import commands
from lib.dbman import c, conn
import math
import config

class Faq(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def faq(self, ctx): # Send query to vamp.db to select lookup from faq table and output the contents field
        """
        Looks up faq listing in database, then returns it in a message.\n\
        Multi-worded listings must be used in quotation marks.\n\
        \n\
        Example: $faq Influence Points
        """
        entry = ctx.message.content.lower().split(maxsplit=1)[-1]
        c.execute("SELECT Contents FROM Faq WHERE LOWER(Listing) == ?",(entry,))
        response = c.fetchall()
        if len(response) == 0:
            await ctx.send(f"FAQ:\nNo entry found for '{entry}'.")
        else:
            # response[3:-4]
            await ctx.send("FAQ:\n'" + entry.title() + "':  " + str(response[0][0]))

    @commands.command(hidden=True)
    async def stake(self, ctx):
        c.execute("CREATE TABLE IF NOT EXISTS Fun (Counter int, Title text)")
        c.execute("INSERT INTO Fun(Counter, Title) SELECT 0, 'Stakes' WHERE NOT EXISTS(SELECT * From Fun WHERE Title = 'Stakes')")
        conn.commit()
        c.execute("SELECT Counter FROM Fun WHERE Title = 'Stakes'")
        counter = c.fetchone()
        counter = int(counter[0]) + 1
        lister = (counter,)
        c.execute("UPDATE Fun SET Counter = ? WHERE Title = 'Stakes'", lister)
        conn.commit()
        await ctx.send(f"*Gets frozen in place.* **Dracula has been staked: {counter} times!**")

    @commands.command()
    async def faqadd(self, ctx):
        """
        Checks if an entry exists in faq table, and if not, adds the record of name,\n\
        and its contents to the table. If the entry does exist, it spits back an error.\n\
        Use := to separate name and content\n
        \n\
        Syntax: $faqadd [entry name]:=[entry information]\n\
        Example: $faqadd Influence Points:=Influence points are generated by...
        """
        authorized = False
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        msg = ctx.message.content.split(':=')
        entry = msg[0].strip()
        entry = entry.split(maxsplit=1)[-1]
        data = msg[-1].strip()
        if authorized:
            c.execute("SELECT Listing FROM Faq WHERE LOWER(Listing) == ?",(entry.lower(),))
            exist_check = c.fetchall()
            if not exist_check:
                c.execute("INSERT INTO Faq VALUES (?,?)",(entry, data,))
                conn.commit()
                await ctx.send(f"FAQ - Listing '{entry}' successfully added with value {data}.")
            else:
                await ctx.send(f"FAQ Error - Listing '{entry}' already exists.")
        else:
            await ctx.send("FAQ Error - User not authorized to use this command.")

    @commands.command(hidden=True)
    async def echo(self, ctx, *words):
        prose = ""
        for word in words:
            prose += word + " "
        await self.bot.get_guild(config.GUILD_ID).get_channel(config.BOT_ANNOUNCEMENTS_CHANNEL).send(prose[:-1])

    @commands.command()
    async def faqdelete(self, ctx):
        """
        Checks if an entry exists in faq table, and if so, removes the record from the table.\n\
        If the entry does not exist, it spits back an error.\n\
        For multi-word listings, they must be enclosed in quotes.\n\
        \n\
        Example: $faqdelete Influence Points
        """
        authorized = False
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        if authorized:
            lister = ctx.message.content.split(maxsplit=1)[-1]
            lister = lister.lower()
            c.execute("SELECT Listing FROM Faq WHERE LOWER(Listing) == ?",(lister,))
            exist_check = c.fetchall()
            if not exist_check:
                await ctx.send(f"FAQ Error - Entry '{lister}' does not exist")
            else:
                c.execute("DELETE FROM Faq WHERE LOWER(Listing) == ?",(lister,))
                conn.commit()
                await ctx.send(f"FAQ - Listing '{lister}' has been removed.")
        else:
            await ctx.send("FAQ Error - User not authorized to use this command.")

    @commands.command()
    async def faqlist(self, ctx, n=1):
        """
        Outputs a list of faq entries in the database. Enter the page number to be displayed.
        """
        c.execute("SELECT Listing FROM Faq")
        names = c.fetchall()
        names = [x[0].title() for x in names]
        names.sort()
        names = [ str(idx+1)+'.   '+i+'\n' for idx,i in enumerate(names)]
        total_pages = math.ceil(len(names)/10)
        if n > total_pages:
            await ctx.send("Not enough entries. Enter lower page number.")
        elif n<=0:
            await ctx.send("Page number must be positive")
        else:
            s = "\n"
            for idx,i in enumerate(names):
                if idx//10 == n-1:
                    s += i
            if n<total_pages:
                s+=" \nDisplaying page {n} out of {total_pages}".format(n=n,total_pages=total_pages)
            await ctx.send("FAQ Entries: {}".format(s))


def setup(bot):
    bot.add_cog(Faq(bot))
