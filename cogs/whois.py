from discord.ext import commands
from lib.dbman import c, conn
import math
import config
import discord

class Helpers():
    def __init__(self):
        pass

    def set_status(self, user, content, kind):
        """
        Helper Function to add Status information in an entry.
        """
        status_str = None
        # print(user, content, kind)
        if kind == 'i':
            c.execute('SELECT content from Bios WHERE ids == :ids AND LOWER(category) == "status";', {'ids':user})
        else:
            c.execute('SELECT content from Bios WHERE LOWER(users) == :user AND LOWER(category) == "status";', {'user':user.lower()})
        status_str = c.fetchone()[0]
        # print("Existing status", status_str)
        status_list = status_str.split(',')
        if content not in status_list:
            status_list.append(content)
            status_str = status_list[0].strip()
            for x in status_list[1:]:
                status_str += ',' + x.strip()
            # print("status string", status_str)
        return status_str

    def normalize_str(self, s):
        msg = ''
        flag = 0
        for idx, i in enumerate(s):
            if idx<len(s)-1 and i == '\\' and s[idx+1]=='n':
                msg += '\n'
                flag = 1
            else:
                if flag == 0:
                    msg += i
                else:
                    flag = 0
        return msg


class Whois(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def whois(self, ctx): # Send query to vamp.db to select lookup from faq table and output the contents field
        """
        Looks up character listing in database, then returns it in a message.\n\
        \n\
        Example: $faq Influence Points
        """
        obj = Helpers()
        entry = ctx.message.content.lower().split(maxsplit=1)[-1]
        mentioned = ctx.message.mentions
        msg = ''
        if len(mentioned):
            mentioned_ids = []
            for i in mentioned:
                mentioned_ids.append(i.id)
            for i in mentioned_ids:
                member_obj = await ctx.guild.fetch_member(i)
                member_name = member_obj.nick
                if member_name == None:
                    member_name = member_obj.name
                c.execute('SELECT content FROM Bios WHERE ids == ? AND LOWER(category) == "bio"', (i,))
                query = c.fetchone()
                msg += 'Name: {}\n'.format(member_name)
                if query != None:
                    query = obj.normalize_str(query[0])
                msg += 'Bio: {}\n'.format(query)
                c.execute('SELECT content FROM Bios WHERE ids == ? AND LOWER(category) == "status"', (i,))
                query = c.fetchone()
                if query != None:
                    query = str(query)[1:-2]
                msg += 'Status: {}\n'.format(query)
                msg += '-----------------------------------\n'
            
        else: 
            user_name = ctx.message.content.split(maxsplit=1)[-1]
            c.execute('SELECT content FROM Bios WHERE LOWER(users) == ? AND LOWER(category) == "bio"', (user_name.lower(),))
            query = c.fetchone()
            msg += 'Name: {}\n'.format(user_name)
            if query != None:
                query = obj.normalize_str(query[0])
            msg += 'Bio: {}\n'.format(query)
            c.execute('SELECT content FROM Bios WHERE LOWER(users) == ? AND LOWER(category) == "status"', (user_name.lower(),))
            query = c.fetchone()
            if query != None:
                query = str(query)[1:-2]
            msg += 'Status: {}\n'.format(query)
        await ctx.send(msg)


    @commands.command()
    async def charadd(self, ctx):
        """
        Checks if an entry exists in faq table, and if not, adds the record of name,\n\
        and its contents to the table. If the entry does exist, it spits back an error.\n\
        Use := to separate name and content\n
        \n\
        Syntax: $faqadd [entry name]:=[entry information]\n\
        Example: $faqadd Influence Points:=Influence points are generated by...
        """
        authorized = False
        flag = ""
        to_insert = {'category':'', 'content':'', 'users':[] , 'ids':[]}
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        msg = ctx.message.content.split('//')
        to_insert['category'] = msg[0].strip()
        to_insert['category'] = to_insert['category'].split(maxsplit=1)[-1]
        to_insert['content'] = msg[1].strip()
        mentioned = ctx.message.mentions
        if authorized:
            if len(mentioned) > 0:
                for i in mentioned:
                    to_insert['ids'].append(i.id)
                    flag = 'i'
            else:
                user_list = msg[2].split(',')
                [ to_insert['users'].append(i.strip()) for i in user_list]
                flag = 'u'
        else:
            to_insert['ids'] = ctx.author.id
            flag = 'i'

        # print(to_insert, flag)
        # await ctx.send("End First Breakpoint")
            
        c.execute("CREATE TABLE IF NOT EXISTS Bios (pks INTEGER PRIMARY KEY AUTOINCREMENT, users text, ids integer, category text, content text);")
        if flag == 'u':
            for i in to_insert['users']:
                c.execute('SELECT users FROM Bios WHERE LOWER(users) == ? AND LOWER(category) == ?;', (i.lower(), to_insert['category'].lower()))
                user_list = c.fetchall()
                if len(user_list) == 0:
                    c.execute('INSERT into Bios (ids, users, category, content) VALUES(0, :user, :category, :content)', {'user':i, 'category':to_insert['category'], 'content':to_insert['content']})
                    await ctx.send("Inserting new entry")
                else: 
                    if to_insert['category'].lower() == 'status':
                        obj = Helpers()
                        to_insert['content'] = obj.set_status(i, to_insert['content'], 'u')
                    c.execute('UPDATE Bios SET content = :content WHERE LOWER(users) == :user AND LOWER(category) == :category;', {'content':to_insert['content'], 'user':i.lower(), 'category':to_insert['category'].lower()})
                    await ctx.send("Updated existing entry")

        if flag == 'i':
            for i in to_insert['ids']:
                c.execute('SELECT ids FROM Bios WHERE ids == ? AND LOWER(category) == ?;', (i, to_insert['category'].lower()))
                ids_list = c.fetchall()
                if len(ids_list) == 0:
                    c.execute('INSERT into Bios (ids,users, category, content) VALUES(:id, "", :category, :content)', {'id':i, 'category':to_insert['category'], 'content':to_insert['content']})
                    await ctx.send("Inserting new entry")
                else: 
                    if to_insert['category'].lower() == 'status':
                        obj = Helpers()
                        to_insert['content'] = obj.set_status(i, to_insert['content'], 'i')
                    c.execute('UPDATE Bios SET content = :content WHERE ids == :ids AND LOWER(category) == :category;', {'content':to_insert['content'], 'ids':i, 'category':to_insert['category'].lower()})
                    await ctx.send("Updated existing entry")

        conn.commit()

    @commands.command()
    async def charwipe(self, ctx):
        authorized = False
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        msg = ctx.message.clean_content[10:].split(",")
        mentioned = ctx.message.mentions
        targets = {'users':[], 'ids':[], 'failed':[]}
        if authorized:
            if len(mentioned) > 0:
                for i in mentioned:
                    targets['ids'].append(i.id)
            for u in msg:
                if "@" not in u:
                    targets['users'].append(u.strip())
            for uid in targets['ids']:
                lister = (uid,)
                c.execute('SELECT * FROM Bios WHERE ids = ?', lister)
                if c.fetchone():
                    c.execute('DELETE FROM Bios WHERE ids = ?', lister)
                    conn.commit()
                else:
                    targets['failed'].append(uid)
            for user in targets['users']:
                lister = (user.lower(),)
                c.execute('SELECT * FROM Bios WHERE LOWER(users) = ?', lister)
                if c.fetchone():
                    c.execute('DELETE FROM Bios WHERE LOWER(users) = ?', lister)
                else:
                    targets['failed'].append(user)
            failed_users = ""
            for fid in targets['failed']:
                try:
                    failed_users += self.bot.get_user(int(fid)).mention + ", "
                except ValueError:
                    failed_users += fid + ", "
            if failed_users:
                await ctx.send(f"These users failed to update: {failed_users[0:-2]}.")
            else:
                await ctx.send("All users successfully removed.")

    @commands.command()
    async def screw_over(self, ctx):
        authorized = False
        targets = {'content': [], 'users': [], 'ids': [], 'ss': []}
        obj = Helpers()
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        msg = ctx.message.clean_content[12:].split('//')
        status = msg[1].split(',')
        toons = msg[0].split(',')
        mentioned = ctx.message.mentions
        if authorized:
            if len(mentioned) > 0:
                for i in mentioned:
                    targets['ids'].append(i.id)
            for u in toons:
                if '@' not in u:
                    targets['users'].append(u.strip())
            for s in status:
                targets['content'].append(s.strip())
            for user in targets['users']:
                st_str = obj.set_status(user, '', 'u')[:-1]
                for status in targets['content']:
                    if status in st_str:
                        sts_str = st_str.replace(status + ',', '')
                        if st_str is sts_str:
                            sts_str = st_str.replace(status, '')
                        listers = (sts_str, user.lower(),)
                        targets['ss'].append(f'{user} ({status})')
                        c.execute('UPDATE Bios SET content = ? WHERE LOWER(users) = ? AND LOWER(category) == "status"', listers)
                        conn.commit()
            for uid in targets['ids']:
                st_str = obj.set_status(uid, '', 'i')[:-1]
                for status in targets['content']:
                    if status in st_str:
                        sts_str = st_str.replace(status + ',', '')
                        if st_str is sts_str:
                            sts_str = st_str.replace(status, '')
                        listers = (sts_str, uid,)
                        targets['ss'].append(f'<@{uid}> ({status})')
                        c.execute('UPDATE Bios SET content = ? WHERE ids = ? AND LOWER(category) = "status"', listers)
                        conn.commit()
            ss_msg = ''
            for succ in targets['ss']:
                ss_msg += succ + ', '
            if ss_msg:
                await ctx.send(f'Successfully removed: {ss_msg[:-2]}.')
            else:
                await ctx.send("No entries were updated.")

    @commands.command()
    async def editbio(self, ctx):
        authorized = False
        targets = {'content': '', 'users': '', 'ids': ''}
        for role in ctx.author.roles:
            if config.ST_ROLE == role.id:
                authorized = True
        msg = ctx.message.clean_content[9:].split('//')
        mentioned = ctx.message.mentions
        if mentioned:
            targets['ids'] = str(mentioned.id)
        else:
            targets['users'] = msg[0].strip()
        targets['content'] = msg[1].strip()
        if authorized:
            if mentioned:
                listers = (targets['content'], targets['ids'],)
                c.execute('UPDATE Bios SET content = ? WHERE ids = ? and LOWER(category) = "bio"', listers)
                conn.commit()
            else:
                listers = (targets['content'], targets['users'].lower(),)
                c.execute('UPDATE Bios SET content = ? WHERE LOWER(users) = ? and LOWER(category) = "bio"', listers)
                conn.commit()
            await ctx.send("Bio modified successfully.")

    @commands.command()
    async def charlist(self, ctx, n=1):
        """
        Outputs a list of characters whose details have been entered.
        """
        c.execute('SELECT users FROM Bios WHERE ids=0 and LOWER(category) = "bio"')
        npc_names = c.fetchall()
        npc_names = [x[0] for x in npc_names]
        npc_disp = 'Cast of Characters:\n'
        count = 1
        total_names = math.ceil(len(npc_names) / 10)
        if n > total_names:
            await ctx.send("Not enough entries. Enter lower page number.")
        elif n <= 0:
            await ctx.send("Page number must be positive")
        else:
            s = "\n"
            for idx, i in enumerate(npc_names):
                if idx // 10 == n - 1:
                    s += str(idx + 1) + ".  " + i + "\n"
            if n < total_names:
                s += " \nDisplaying page {n} out of {total_pages}".format(n=n, total_pages=total_names)
            await ctx.send("Whois Entries: {}".format(s))


def setup(bot):
    bot.add_cog(Whois(bot))
